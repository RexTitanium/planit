"use client";

import { useState } from "react";
import { v4 as uuidv4 } from "uuid";
import TaskBlock from "@/components/TaskBlock";
import { XIcon } from "lucide-react";
import { usePlanit, TaskData } from "@/context/PlanitContext";

export default function TaskBoard() {
  const { tasks, setTasks } = usePlanit();
  const [loading, setLoading] = useState(false);
  const [inputGoal, setInputGoal] = useState("");
  const API_URL = process.env.NEXT_PUBLIC_API_URL;

  const addNewTask = () => {
    setTasks((prev) => [
      ...prev,
      {
        id: uuidv4(),
        title: "Untitled Task",
        subtasks: [],
        notes: "Generated by Planit AI. Add notes, links, or ideas...",
        status: "Todo",
      },
    ]);
  };

  const removeTask = (id: string) => {
    setTasks((prev) => prev.filter((task) => task.id !== id));
  };

  const updateTask = (id: string, updatedTask: TaskData) => {
    setTasks((prev) =>
      prev.map((task) => (task.id === id ? updatedTask : task))
    );
  };

  const generateFromAI = async () => {
    if (!inputGoal.trim()) return;
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/generate-tasks`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ goal: inputGoal }),
      });
      const data = await response.json();
      const aiTasks = data.tasks.map((t: { title: string; subtasks: string[] }) => ({
        id: uuidv4(),
        title: t.title,
        subtasks: t.subtasks.map((sub: string) => ({
          id: uuidv4(),
          title: sub,
          status: "Todo",
        })),
        notes: "Generated by Planit AI.",
        status: "Todo",
      }));
      setTasks(aiTasks);
    } catch (err) {
      console.error("Failed to generate plan", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-black text-white px-4 py-10 sm:px-12">
      <div className="max-w-2xl mx-auto w-full">
        <h1 className="text-2xl sm:text-3xl font-semibold mb-8">
          🛠️ Task Canvas
        </h1>

        <div className="flex gap-2 mb-6">
          <input
            type="text"
            value={inputGoal}
            onChange={(e) => setInputGoal(e.target.value)}
            placeholder="What do you want to plan?"
            className="flex-1 px-3 py-2 bg-[#1a1a1a] border border-[#333] rounded text-sm outline-none"
          />
          <button
            onClick={generateFromAI}
            disabled={loading}
            className="bg-blue-600 hover:bg-blue-500 px-4 py-2 text-sm rounded disabled:opacity-50"
          >
            {loading ? "Thinking..." : "Generate"}
          </button>
        </div>

        <div className="flex flex-col gap-6">
          {tasks.map((task) => (
            <div key={task.id} className="relative">
              <TaskBlock
                {...task}
                onUpdate={(updatedTask) => updateTask(task.id, updatedTask)}
              />
              <button
                onClick={() => removeTask(task.id)}
                className="absolute top-0 right-0 w-4 h-4 bg-red-500 transition-all duration-300 ease flex flex-row justify-center items-center rounded-xl hover:bg-red-600 cursor-pointer"
              >
                <XIcon width={12} height={12} />
              </button>
            </div>
          ))}

          <button
            onClick={addNewTask}
            className="self-start text-sm text-gray-400 hover:text-white transition"
          >
            + Add Task
          </button>
        </div>
      </div>
    </div>
  );
}
